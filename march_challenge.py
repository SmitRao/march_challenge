
# Submission by Smit Rao

# Email: raosmit2@gmail.com


VAR = 'x'


def differentiate(expr: str) -> str:
    '''Differentiate simple expression expr and return the result as a string.
    An expression is simple if its derivation only requires use of the 
    power/exponent rule.
    Keep negative powers - do not convert to fractions.
    Preconditions:
        - all numbers are integers
        - all powers EXCEPT powers of one are prefixed with a '^'
          AND they can be negative
          AND they can be of any length
          ex: x to the power of negative twenty two is x^-123
        - coefficients can be of any length
        - all input expressions are single variable: 'x'
          AND have only one term
    :param expr: the expression to differentiate
    :return: the derivative of the input expression

    >>> differentiate('44')
    '0'
    >>> differentiate('x^123')
    '123x^122'
    >>> differentiate('-12x^3')
    '-36x^2'
    >>> differentiate('x')
    '1'
    >>> differentiate('')
    '0'
    '''

    global VAR  # use this for the variable
    lst = expr.split('^')
    if len(lst) == 1:
        if VAR in lst[0]:
            sub = lst[0][: -1]
            if sub == '':
                return '1'
            return sub
        else:
            return '0'
    lst[0] = lst[0][: -1]
    if lst[0] == '':
        lst[0] = 1
    else:
        lst[0] = int(lst[0])
    lst[0] *= int(lst[1])
    lst[0] = str(lst[0])
    lst[0] += VAR
    lst[1] = str(int(lst[1]) - 1)
    return '^'.join(lst)


def calculate_heat(d: dict) -> int:
    '''Returns the total heat generated by all of the magic orbs

    Gazoulee is a fortune teller that owns many magic orbs, each of
    which generate a constant amount of heat. He is building a
    house that he will move into shorty which needs to be kept at a steady
    temperature for the rest of his contraptions to function correctly.
    Gazoulee must tell his HVAC contractor how much heat will be
    generated by his magic orbs so that the contractor can properly
    design the HVAC system.

    Gazoulee has hired you to do the total heat calculations for him,
    given necessary quantities and measurements.

    NOTES:
        - all distances are in centimeters.
        - every 2 square centimeters of a magic orb dissipates 4 J (4 joules) 
        of heat.
        - answers should be rounded down to the nearest whole joule.
        - each dictionary entry contains the information for that magic orb 
        type
        - the value of each dictionary entry is a tuple of:
            (<radius>, <number of magic orbs with this dimension>)

    :param d: dictionary containing the details of all of the magic orbs
    :return: the total heat generated by all of Gazoulee's magic 
    orbs in joules

    >>> calculate_heat({"Standard Wizarding Orb": \
    (7.5, 12), "Alfredo the Orb": (17.5, 1)})
    24662
    '''
    
    pi = 3.141592653589793
    joules = 0
    for tup in d.values():
        joules += tup[0] * tup[0] * pi * tup[1] * 4 * 2
    return round(joules)
    


def is_balanced(lst: list) -> bool:
    '''Returns whether list lst is composed entirely of only 'C', 'S' pairs.

    NOTES:
        - only lists composed of 'C's and 'S's are balanced lists
        - the 'C' and 'S' pairs can be interleaved

    HINT:
        - every 'C' must eventually have a corresponding 'S' 
        further in the list

    :param lst: 
    :return: whether the list lst is balanced

    >>> is_balanced(['C', 'S'])
    True
    >>> is_balanced(['S', 'C'])
    False
    >>> is_balanced(['C', 'S', 'S'])
    False
    >>> is_balanced(['C', 'S', 'C', 'C', 'S', 'C', 'S', 'S'])
    True
    '''
    
    C_count = 0
    S_count = 0
    balanced = True
    if len(lst) % 2 == 1:
        return not balanced
    for index in range(len(lst)):
        if lst[index] != 'C' and lst[index] != 'S':
            return not balanced
        if C_count < S_count:
            return not balanced
        if lst[index] == 'C':
            C_count += 1
        if lst[index] == 'S':
            S_count += 1
    balanced = (C_count == S_count)
    return balanced




if __name__ == '__main__':
    import doctest
    doctest.testmod()